#차분
dif=diff(pr_ts_train,differences=1)
plot.ts(dif)
prdif_ts_decompM <- decompose(dif, type = "multiplicative")
plot(prdif_ts_decompM, xlab="")
acf(dif, lag.max=20)
ggAcf(dif) #추세나 계절성이 있다.
ggPacf(dif)
#차분
dif=diff(pr_ts_train,differences=2)
ggAcf(dif) #추세나 계절성이 있다.
ggPacf(dif)
#차분
dif=diff(pr_ts_train,differences=1)
ggAcf(dif) #추세나 계절성이 있다.
ggPacf(dif)
ggAcf(dif) #추세나 계절성이 있다.
#자기상관
ggAcf(pr_ts_train) #추세나 계절성이 있다.
ggPacf(pr_ts_train)
#차분
dif=diff(pr_ts_train,differences=1)
plot.ts(dif)
prdif_ts_decompM <- decompose(dif, type = "multiplicative")
plot(prdif_ts_decompM, xlab="")
ggAcf(dif) #lag3에서 절단
ggPacf(dif)
auto.arima(pr_ts_train)
auto.arima(dif)
fit=Arima(dif, order=c(2,0,0), seasonal=c(0,0,1))
checkresiduals(fit)
f_arima= forecast(fit, 52)
plot(f_arima, main="", xaxt="n")
lines(pr_ts_validation, col='red')
accuracy(f_arima, pr_ts_validation)[2,,drop=FALSE]
lines(diff(pr_ts_validation,differences=1), col='red')
accuracy(f_arima, pr_ts_validation)[2,,drop=FALSE]
accuracy(f_arima,diff(pr_ts_validation,differences=1))[2,,drop=FALSE]
fit=arima(dif, order=c(2,0,0), seasonal=c(0,0,1))
checkresiduals(fit)
f_arima= forecast(fit, 52)
plot(f_arima, main="", xaxt="n")
cbind("판매량 (백만 달러)" = pr_ts_train,
"월별 로그 판매량" = log(pr_ts_train),
"로그 눈금에서 연간 변동" = diff(log(pr_ts_train),52)) %>%
autoplot(facets=TRUE) +
xlab("연도") + ylab("") +
ggtitle("당뇨병 약 판매량")
cbind("판매량 (백만 달러)" = pr_ts_train,
"월별 로그 판매량" = log(pr_ts_train),
"로그 눈금에서 연간 변동" = diff(log(pr_ts_train),12)) %>%
autoplot(facets=TRUE) +
xlab("연도") + ylab("") +
ggtitle("당뇨병 약 판매량")
dif2 = diff(log(pr_ts_train),52)
plot.ts(dif2)
prdif_ts_decompM <- decompose(dif2, type = "multiplicative")
plot(prdif_ts_decompM, xlab="")
prdif2_ts_decompM <- decompose(dif2, type = "multiplicative")
plot(prdif2_ts_decompM, xlab="")
ggAcf(dif2) #lag3에서 절단
ggPacf(dif2)
ggAcf(dif) #lag3에서 절단
ggPacf(dif)
ggAcf(dif) #lag3에서 절단
ggPacf(dif)
f_arima= forecast.Arima(fit, 52)
auto.arima(pr_ts_train)
fit %>% residuals() %>% ggtsdisplay()
fit=arima(pr_ts_train, order=c(2,0,0), seasonal=c(0,0,1))
fit %>% residuals() %>% ggtsdisplay()
auto.arima(pr_ts_train)
fit=arima(pr_ts_train, order=c(2,1,0), seasonal=c(0,0,1))
checkresiduals(fit)
fit %>% residuals() %>% ggtsdisplay()
cbind("10억 kWh" = pr_ts_train,
"로그" = log(pr_ts_train),
"계절성\n 차분 로그값" =
diff(log(pr_ts_train),12),
"두 번\n 차분을 구한 로그값" =
diff(diff(log(pr_ts_train),12),1)) %>%
autoplot(facets=TRUE) +
xlab("연도") + ylab("") +
ggtitle("미국 월별 순 전기 생산량")
cbind("10억 kWh" = pr_ts_train,
"로그" = log(pr_ts_train),
"계절성\n 차분 로그값" =
diff(log(pr_ts_train),52),
"두 번\n 차분을 구한 로그값" =
diff(diff(log(pr_ts_train),52),1)) %>%
autoplot(facets=TRUE) +
xlab("연도") + ylab("") +
ggtitle("미국 월별 순 전기 생산량")
dif2 = diff(diff(log(pr_ts_train),52),1))
dif2 = diff(diff(log(pr_ts_train),52),1)
ggAcf(dif2) #lag3에서 절단
ggPacf(dif2)
plot.ts(dif)
cbind("10억 kWh" = pr_ts_train,
"로그" = log(pr_ts_train),
"계절성\n 차분 로그값" =
diff(log(pr_ts_train),52),
"두 번\n 차분을 구한 로그값" =
diff(diff(log(pr_ts_train),52),1)) %>%
autoplot(facets=TRUE) +
xlab("연도") + ylab("") +
ggtitle("미국 월별 순 전기 생산량")
dif2 = diff(diff(log(pr_ts_train),52),1)
ggAcf(dif2) #lag3에서 절단
ggPacf(dif2)
ggPacf(dif)
#자기상관
ggAcf(pr_ts_train) #추세나 계절성이 있다.
ggPacf(pr_ts_train)
auto.arima(pr_ts_train)
fit=arima(pr_ts_train, order=c(2,1,0))
checkresiduals(fit)
fit %>% residuals() %>% ggtsdisplay()
f_arima= forecast(fit, 52)
plot(f_arima, main="", xaxt="n")
lines(diff(pr_ts_validation,differences=1), col='red')
lines(pr_ts_validation, col='red')
accuracy(f_arima,diff(pr_ts_validation,differences=1))[2,,drop=FALSE]
fit=arima(pr_ts_train, order=c(2,1,0), seasonal=c(0,0,1))
checkresiduals(fit)
fit %>% residuals() %>% ggtsdisplay()
f_arima= forecast(fit, 52)
plot(f_arima, main="", xaxt="n")
lines(pr_ts_validation, col='red')
accuracy(f_arima,diff(pr_ts_validation,differences=1))[2,,drop=FALSE]
accuracy(f_arima,pr_ts_validation)[2,,drop=FALSE]
data_ts
pr_ts_test
f_arima= forecast(fit, 97)
plot(f_arima, main="", xaxt="n")
lines(pr_ts_test, col='red')
KOR_ticker = read.csv('data/KOR_ticker.csv', row.names = 1, stringsAsFactors = FALSE)
codex = paste0("X","145720")
date <- KOR_price[,1]
price =KOR_price[,codex]
data <- data.frame( cbind(date,price) )
data$date = as.Date(data$date)
data$price = as.character(data$price)
data$price = as.numeric(data$price)
head(data); dim(data)
data = data[311:499,] #2017년 3월 24일 상장-> 2017년~
highchart(type = 'stock') %>%
hc_add_series(price) %>%
hc_scrollbar(enabled = FALSE)
##시계열 데이터
data_ts = ts(data$price,start=c(2017,12),frequency=52)
plot.ts(data_ts)
pr_ts_train = window(data_ts, start=c(2017,12), end=c(2019,12))
pr_ts_validation = window(data_ts, start=c(2019,13), end=c(2019,52))
pr_ts_test = window(data_ts, start=c(2020,1),end=c(2020,44))
##EDA
par(mfrow=c(2,1))
par(mar=c(2, 3, 0, 2), xaxs='i', yaxs='i')
plot(pr_ts_train, ylab="주가", type="c", pch =20, xaxt='n', xlab="")
text(pr_ts_train, col=1:52, labels=1:52, cex=.7)
plot(pr_ts_train, ylab="주가", type="o", pch =20, xlab="")
# 기본 시계열 분해
pr_ts_decompM <- decompose(pr_ts_train, type = "multiplicative")
plot(pr_ts_decompM, xlab="")
#자기상관
ggAcf(pr_ts_train) #추세나 계절성이 있다.
ggPacf(pr_ts_train)
#차분
dif=diff(pr_ts_train,differences=1)
plot.ts(dif)
prdif_ts_decompM <- decompose(dif, type = "multiplicative")
plot(prdif_ts_decompM, xlab="")
ggAcf(dif) #절단점을 찾아서 arima 모델
plot(prdif_ts_decompM, xlab="")
ggAcf(dif) #절단점을 찾아서 arima 모델
ggPacf(dif)
auto.arima(pr_ts_train)
fit=arima(pr_ts_train, order=c(0,1,0))
checkresiduals(fit)
fit %>% residuals() %>% ggtsdisplay()
pr_ts_validation
f_arima= forecast(fit, 39)
plot(f_arima, main="", xaxt="n")
lines(pr_ts_validation, col='red')
accuracy(f_arima,pr_ts_validation)[2,,drop=FALSE]
pr_ts_test
pr_ts_validation
pr_ts_test
f_arima= forecast(fit, 84)
plot(f_arima, main="", xaxt="n")
lines(pr_ts_test, col='red')
##예측모델
models <- list (
mod_arima = auto.arima(pr_ts_train, ic='aicc', stepwise=FALSE),
# mod_exponential = ets(pr_ts_train, model="MAM",ic='aicc', restrict=FALSE),
mod_neural = nnetar(pr_ts_train, size=25),
mod_tbats = tbats(pr_ts_train, ic='aicc', seasonal.periods=52),
mod_bats = bats(pr_ts_train, ic='aicc', seasonal.periods=52),
mod_stl = stlm(pr_ts_train, s.window=52, ic='aicc', robust=TRUE, method='ets'),
mod_sts = StructTS(pr_ts_train)
)
forecasts <- lapply(models, forecast, 40)
forecasts$naive <- naive(pr_ts_train, 40)
par(mfrow=c(4,2))
par(mar=c(2, 2, 1.5, 2), xaxs='i', yaxs='i')
for(f in forecasts){
plot(f, main="", xaxt="n")
lines(pr_ts_test, col='red')
}
acc <- lapply(forecasts, function(f){
accuracy(f, pr_ts_validation)[2,,drop=FALSE]
})
acc <- Reduce(rbind, acc)
for(f in forecasts){
plot(f, main="", xaxt="n")
lines(pr_ts_validation, col='red')
}
acc <- lapply(forecasts, function(f){
accuracy(f, pr_ts_validation)[2,,drop=FALSE]
})
acc <- Reduce(rbind, acc)
row.names(acc) <- names(forecasts)
acc <- acc[order(acc[,'MASE']),]
round(acc, 2)
plot(fit_stl, main="", xaxt="n")
fit_stl = forecast(mod_stl,84)
#2020년 예측
mod_stl = stlm(pr_ts_train, s.window=52, ic='aicc', robust=TRUE, method='ets')
fit_stl = forecast(mod_stl,84)
plot(fit_stl, main="", xaxt="n")
lines(pr_ts_test, col='red')
par(mfrow=c(1,1))
plot(fit_stl, main="", xaxt="n")
lines(pr_ts_test, col='red')
#자기상관
ggAcf(pr_ts_train) #추세나 계절성이 있다.
codex = paste0("X","145720")
date <- KOR_price[,1]
price =KOR_price[,codex]
data <- data.frame( cbind(date,price) )
data$date = as.Date(data$date)
data$price = as.character(data$price)
data$price = as.numeric(data$price)
head(data); dim(data)
data = data[311:499,] #2017년 3월 24일 상장-> 2017년~
head(data); dim(data)
##시계열 데이터
data_ts = ts(data$price,start=c(2017,12),frequency=52)
plot.ts(data_ts)
pr_ts_train = window(data_ts, start=c(2017,12), end=c(2019,12))
pr_ts_validation = window(data_ts, start=c(2019,13), end=c(2019,52))
pr_ts_test = window(data_ts, start=c(2020,1),end=c(2020,44))
##EDA
par(mfrow=c(2,1))
par(mar=c(2, 3, 0, 2), xaxs='i', yaxs='i')
plot(pr_ts_train, ylab="주가", type="c", pch =20, xaxt='n', xlab="")
text(pr_ts_train, col=1:52, labels=1:52, cex=.7)
plot(pr_ts_train, ylab="주가", type="o", pch =20, xlab="")
# `forecast` 패키지 계절변동 시각화
par(mfrow=c(1,1))
library(forecast)
seasonplot(pr_ts_train, ylab="주가", xlab="",
main="",
year.labels=TRUE, year.labels.left=TRUE, col=1:20, pch=20)
# 기본 시계열 분해
pr_ts_decompM <- decompose(pr_ts_train, type = "multiplicative")
plot(pr_ts_decompM, xlab="")
#자기상관
ggAcf(pr_ts_train) #추세나 계절성이 있다.
ggPacf(pr_ts_train)
#차분
dif=diff(pr_ts_train,differences=1)
plot.ts(dif)
prdif_ts_decompM <- decompose(dif, type = "multiplicative")
plot(prdif_ts_decompM, xlab="")
ggAcf(dif) #절단점을 찾아서 arima 모델
ggPacf(dif)
auto.arima(pr_ts_train)
fit=arima(pr_ts_train, order=c(0,1,0))
checkresiduals(fit)
codex = paste0("X","000100")
date <- KOR_price[,1]
price =KOR_price[,codex]
data <- data.frame( cbind(date,price) )
data$date = as.Date(data$date)
data$price = as.character(data$price)
data$price = as.numeric(data$price)
head(data); dim(data)
data = data[311:499,] #2017년 3월 24일 상장-> 2017년~
codex = paste0("X","000100")
date <- KOR_price[,1]
price =KOR_price[,codex]
data <- data.frame( cbind(date,price) )
data$date = as.Date(data$date)
data$price = as.character(data$price)
data$price = as.numeric(data$price)
head(data); dim(data)
data = data[39:499,] #2012년부터
library(highcharter)
highchart(type = 'stock') %>%
hc_add_series(price) %>%
hc_scrollbar(enabled = FALSE)
##시계열 데이터
data_ts = ts(data$price,start=c(2012,1),frequency=52)
plot.ts(data_ts)
pr_ts_train = window(data_ts, start=c(2012,1), end=c(2018,52))
pr_ts_validation = window(data_ts ,start=c(2019,1), end=c(2019,52))
pr_ts_test = window(data_ts, start=c(2020,1),end=c(2020,45))
##EDA
par(mfrow=c(2,1))
par(mar=c(2, 3, 0, 2), xaxs='i', yaxs='i')
plot(pr_ts_train, ylab="주가", type="c", pch =20, xaxt='n', xlab="")
text(pr_ts_train, col=1:52, labels=1:52, cex=.7)
plot(pr_ts_train, ylab="주가", type="o", pch =20, xlab="")
# `forecast` 패키지 계절변동 시각화
par(mfrow=c(1,1))
library(forecast)
seasonplot(pr_ts_train, ylab="주가", xlab="",
main="",
year.labels=TRUE, year.labels.left=TRUE, col=1:20, pch=20)
# 기본 시계열 분해
pr_ts_decompM <- decompose(data_ts, type = "multiplicative")
plot(pr_ts_decompM, xlab="")
#자기상관
ggAcf(pr_ts_train) #추세나 계절성이 있다.
ggPacf(pr_ts_train)
#자기상관
ggAcf(pr_ts_train) #추세나 계절성이 있다.
auto.arima(pr_ts_train)
ggPacf(pr_ts_train)
#자기상관
ggAcf(pr_ts_train) #추세나 계절성이 있다.
#차분
dif=diff(pr_ts_train,differences=1)
plot.ts(dif)
prdif_ts_decompM <- decompose(dif, type = "multiplicative")
plot(prdif_ts_decompM, xlab="")
ggAcf(dif) #절단점을 찾아서 arima 모델
ggPacf(dif)
auto.arima(pr_ts_train)
fit=arima(pr_ts_train, order=c(2,1,0), seasonal=c(0,0,1))
checkresiduals(fit)
fit %>% residuals() %>% ggtsdisplay()
f_arima= forecast(fit, 52)
plot(f_arima, main="", xaxt="n")
lines(pr_ts_validation, col='red')
accuracy(f_arima,pr_ts_validation)[2,,drop=FALSE]
f_arima= forecast(fit, 97)
plot(f_arima, main="", xaxt="n")
lines(pr_ts_test, col='red')
##예측모델
models <- list (
mod_arima = auto.arima(pr_ts_train, ic='aicc', stepwise=FALSE),
# mod_exponential = ets(pr_ts_train, model="MAM",ic='aicc', restrict=FALSE),
mod_neural = nnetar(pr_ts_train, size=25),
mod_tbats = tbats(pr_ts_train, ic='aicc', seasonal.periods=52),
mod_bats = bats(pr_ts_train, ic='aicc', seasonal.periods=52),
mod_stl = stlm(pr_ts_train, s.window=52, ic='aicc', robust=TRUE, method='ets'),
mod_sts = StructTS(pr_ts_train)
)
forecasts <- lapply(models, forecast, 52)
forecasts$naive <- naive(pr_ts_train, 52)
par(mfrow=c(4,2))
par(mar=c(2, 2, 1.5, 2), xaxs='i', yaxs='i')
for(f in forecasts){
plot(f, main="", xaxt="n")
lines(pr_ts_validation, col='red')
}
acc <- lapply(forecasts, function(f){
accuracy(f, pr_ts_validation)[2,,drop=FALSE]
})
acc <- Reduce(rbind, acc)
row.names(acc) <- names(forecasts)
acc <- acc[order(acc[,'MASE']),]
round(acc, 2)
eacf(dif)
ggAcf(dif); acf(dif, lag.max=104, plot=FALSE) #절단점을 찾아서 arima 모델
Box.test(pr_ts_train,type="Ljung-Box",lag=52)
#자기상관
ggAcf(pr_ts_train) #추세나 계절성이 있다.
ggPacf(pr_ts_train)
Box.test(pr_ts_train,type="Ljung-Box",lag=52)
install.packages("rugarch")
library("rugarch")
plot(pr_ts_decompM, xlab="")
#자기상관
ggAcf(pr_ts_train) #정확히 있다, 없다 하기 어려움
install.packages("TSA")
library(TSA)
library(tseries)
#자기상관
eacf(diff(log(pr_ts_train)))
#자기상관
eacf(diff(log(pr_ts_train))^2)
#자기상관
eacf((diff(log(pr_ts_train)))^2)
plot(pr_ts_decompM, xlab="")
#자기상관
ggAcf(pr_ts_train) #정확히 있다, 없다 하기 어려움
ggPacf(pr_ts_train)
libarary(TSA)
eacf((diff(log(pr_ts_train)))^2)
auto.arima(pr_ts_train)
model_g <- garch(pr_ts_train,order=c(0,1))
summary(model_g)
model_g <- garch(pr_ts_train,order=c(0,1,0))
plot(pr_ts_decompM, xlab="")
model_g <- garch(pr_ts_train,order=c(0,1,0))
fit_g = forecast(model_g,52)
dif = diff(log(pr_ts_train))
model_g <- garch(dif,order=c(0,1,0))
auto.arima(dif)
auto.arima(pr_ts_train)
model_g <- garch(dif,order=c(0,1,0))
fit_g = forecast(model_g,52)
#자기상관
ggAcf(pr_ts_train) #정확히 있다, 없다 하기 어려움
plot(pr_ts_decompM, xlab="")
# 기본 시계열 분해
pr_ts_decompM <- decompose(pr_ts_train, type = "multiplicative")
plot(pr_ts_decompM, xlab="")
#자기상관
season = pr_ts_train %>% stl(s.window='periodic') %>% seasadj
autoplot(season)
#자기상관
plot(pr_ts_train)
season = pr_ts_train %>% stl(s.window='periodic') %>% seasadj
autoplot(season)
#자기상관
par(mfrow=c(1,1))
plot(pr_ts_train)
season = pr_ts_train %>% stl(s.window='periodic') %>% seasadj
autoplot(season)
plot(pr_ts_train)
plot(pr_ts_decompM, xlab="")
season = pr_ts_train %>% stl(s.window='periodic') %>% seasadj
autoplot(season)
ggAcf(pr_ts_train) #정확히 있다, 없다 하기 어려움
ggPacf(pr_ts_train)
Box.test(pr_ts_train,type="Ljung-Box",lag=52) #자기상관성 없다.
auto.arima(pr_ts_train)
#arima모델
fit=arima(pr_ts_train, order=c(0,1,0))
f_arima= forecast(fit, 52)
#arima모델
fit=arima(pr_ts_train, order=c(0,1,0))
f_arima= forecast(fit, 52)
auto.arima(pr_ts_train)
codex = paste0("X","000100")
date <- KOR_price[,1]
price =KOR_price[,codex]
data <- data.frame( cbind(date,price) )
data$date = as.Date(data$date)
data$price = as.character(data$price)
data$price = as.numeric(data$price)
head(data); dim(data)
data = data[39:499,] #2012년부터
library(highcharter)
highchart(type = 'stock') %>%
hc_add_series(price) %>%
hc_scrollbar(enabled = FALSE)
##시계열 데이터
data_ts = ts(data$price,start=c(2012,1),frequency=52)
plot.ts(data_ts)
pr_ts_train = window(data_ts, start=c(2012,1), end=c(2018,52))
pr_ts_validation = window(data_ts ,start=c(2019,1), end=c(2019,52))
pr_ts_test = window(data_ts, start=c(2020,1),end=c(2020,45))
##EDA
par(mfrow=c(2,1))
par(mar=c(2, 3, 0, 2), xaxs='i', yaxs='i')
plot(pr_ts_train, ylab="주가", type="c", pch =20, xaxt='n', xlab="")
text(pr_ts_train, col=1:52, labels=1:52, cex=.7)
plot(pr_ts_train, ylab="주가", type="o", pch =20, xlab="")
# `forecast` 패키지 계절변동 시각화
par(mfrow=c(1,1))
library(forecast)
seasonplot(pr_ts_train, ylab="주가", xlab="",
main="",
year.labels=TRUE, year.labels.left=TRUE, col=1:20, pch=20)
# 기본 시계열 분해
pr_ts_decompM <- decompose(pr_ts_train, type = "multiplicative")
plot(pr_ts_decompM, xlab="")
#자기상관
par(mfrow=c(1,1))
plot(pr_ts_train)
season = pr_ts_train %>% stl(s.window='periodic') %>% seasadj
autoplot(season)
ggAcf(pr_ts_train) #정확히 있다, 없다 하기 어려움
ggPacf(pr_ts_train)
ggAcf(pr_ts_train) #정확히 있다, 없다 하기 어려움
ggPacf(pr_ts_train)
#library(TSA) eacf보고 모수 정하는것
#dif = diff(log(pr_ts_train))
#eacf(dif^2)
Box.test(pr_ts_train,type="Ljung-Box",lag=52) #자기상관성 없다.
auto.arima(pr_ts_train)
#arima모델
fit=arima(pr_ts_train, order=c(0,1,0))
checkresiduals(fit)
fit %>% residuals() %>% ggtsdisplay()
f_arima= forecast(fit, 52)
f_arima= forecast(fit, 51)
f_arima= forecast(fit, 53)
pr_ts_train
f_arima= forecast(model_arima,52 )
#arima모델
model_arima=arima(pr_ts_train, order=c(0,1,0))
checkresiduals(model_arima) #모델 적합하지 않다.
model_arima %>% residuals() %>% ggtsdisplay()
f_arima= forecast(model_arima,52 )
f_arima= forecast(model_arima,40 )
f_arima= forecast(model_arima, 97 )
